spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
  kafka:
    listener.ack-mode: manual
    bootstrap-servers:
      - localhost:9092
      - localhost:9093
      - localhost:9094
    cloud:
      zookeeper:
        config.enabled: false
        connect-string: localhost:2181
    ttl: 1

resilience4j:
  circuitbreaker:
    instances:
      CircuitBreaker:
        failureRateThreshold: 50
        minimumNumberOfCalls: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: count_based
  retry:
    instances:
      Retry:
        maxAttempts: 3
        waitDuration: 1s
  ratelimiter:
    instances:
      RateLimiter:
        registerHealthIndicator: true
        limitForPeriod: 1
        limitRefreshPeriod: 300s
        timeoutDuration: 0s
        allowHealthIndicatorToFail: true
        subscribeForEvents: true
        eventConsumerBufferSize: 50
      ApiRateLimiter:
        registerHealthIndicator: true
        limitForPeriod: 1
        limitRefreshPeriod: 300s
        timeoutDuration: 0s
        allowHealthIndicatorToFail: true
        subscribeForEvents: true
        eventConsumerBufferSize: 50

minio:
  url: http://localhost:9000
  port: 9000
  accessKey: user
  secretKey: password
  secure: false
  bucket: minio-storage
  image-size: 10485760

token:
  signing:
    key: 53A73E5F1C4E0A2D3B5F2D784E6A1B423D6F247D1F6E5C3A596D635A75327855

management:
  endpoints:
    web:
      exposure:
        include: health,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true
